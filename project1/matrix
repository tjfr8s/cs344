#!/bin/bash

# This function removes all of the temp files used by the program.
clean () {
    rm -f ./*"$$"
}

# This function verifies that the calling function received the correct
# number of arguments.
#
# params:
# $1 - the number of agrs passed to the function being verified
# $2 - the min number of args for function
# $3 - the max number of args for function
#
# returns: the function returns 0 if the argument count is valid and 1
# otherwise. An error message is sent to stderr when the funciton returns 1.
check_num_args () {
    if [ "$1" -gt "$3" ]; then 
        >&2 echo "error: too many arguments"
       return 1
    elif [ "$1" -lt "$2" ]; then
        >&2 echo "error: too few arguments"
       return 1
    else
       return 0
    fi
}

# This function calculates the dimensions of a matrix.
#
# params:
# $1 - a matrix
#
# postconditions: Sends the dimensions of the matrix to stdout in the form
# rows\tcols
dims () {
    # Count the number of rows by reading the lines in the matrix.
    rows=0

    while read line
    do
        rows=$((rows + 1))
    done < "./$1"

    # Count the number of columns using wc.
    read -r cols_line < "$1"
    cols=$(echo "$cols_line" | wc -w  | cut -d $'\t' -f1)

    # Display results.
    echo "$rows $cols"
    exit 0
}

# This function takes a matrix as input and outputs the transpose of that
# matrix.
#
# params:
# $1 - input matrix
#
# postconditions: sends transpose matrix to stdout.
transpose() {
    # Count rows.
    rows=0
    while read line
    do
        rows=$((rows + 1))
    done < "./$1"

    # Count cols.
    read -r cols_line < "$1"
    cols=$(echo "$cols_line" | wc -w  | cut -d $'\t' -f1)
    transpose_path="./transpose$$"
    touch "$transpose_path"

    # For each column in the input matrix, loop through the values in each 
    # row of that column and add them sequentially to a new row in the output
    # matrix.
    col=1
    while [ "$col" -le "$cols" ]
    do
        temp_row_path="./temprow$$"
        touch "$temp_row_path"

        # Get each value in a column and build a row from them.
        while read row
        do
            echo "$row" | cut -f "$col" -d $'\t' | tr -d $'\n' \
                >> "$temp_row_path"
            echo -n $'\t' >> "$temp_row_path"
        done <"./$1"
        col=$((col + 1))

        # Remove trailing whitespace from the new row and add it to the output
        # matrix
        next_row=$( cat "$temp_row_path" )
        next_row=${next_row%?}
        echo "$next_row" >> "$transpose_path"
        rm "$temp_row_path"
    done

    cat "$transpose_path"
    return 0
}

# This function calculates the mean of the values in each column of a matrix
# and ouputs them as an array.
#
# params:
# $1 - input matrix
# 
# postconditions: The function sends the array of column means to stdout.
mean() {
    # Count rows.
    rows=0
    while read line
    do
        rows=$((rows + 1))
    done < "./$1"

    # Count cols.
    read -r cols_line < "$1"
    cols=$(echo "$cols_line" | wc -w  | cut -d $'\t' -f1)

    mean_path="./mean$$"
    touch "$mean_path"

    # Visit each column of the input matrix.
    col=1
    while [ "$col" -le "$cols" ]
    do
        # For each column, visit the value in each row and add it to the 
        # running total for that column.
        col_sum=0
        while read row
        do
            cell_val=$(echo "$row" | cut -f "$col" -d $'\t' | tr -d $'\n')
            col_sum=$((col_sum + cell_val))
        done <"./$1"

        # Calculate the column's mean using appropriate rounding method and 
        # add it to the output.
        mean="$(((col_sum + (rows / 2) * ((col_sum > 0) * 2 - 1)) / rows))"
        col=$((col + 1))
        echo -n "$mean" >> "$mean_path"
        echo -n $'\t' >> "$mean_path"
    done

    # Trim the trailing tab character from the output.
    mean_row=$( cat "$mean_path" )
    mean_row=${mean_row%?}
    echo "$mean_row" > "$mean_path"

    cat "$mean_path"
    return 0
}

# This function takes two matrices with the same dimensions and calculates 
# sum.
#
# params:
# $1 - matrix 1
# $2 - matrix 2
#
# postconditions: the function sends the resulting matrix to stdout.
add() {
    # Concurrently read in a row from each matrix until all rows have been 
    # visited.
    cols=$(dims "$1" | cut -d $' ' -f2)
    add_file_path="addfile$$"
    while read m1row <&3 && read m2row <&4; do

        # Add the values in the current rows of each matrix elementwise to
        # form a new row for the resulting matrix.
        new_row=""
        col=1
        while [ "$col" -le "$cols" ]; do
            m1val=$(echo "$m1row" | cut -f "$col" -d $'\t' | tr -d $'\n')
            m2val=$(echo "$m2row" | cut -f "$col" -d $'\t' | tr -d $'\n')
            sumval=$((m1val + m2val))
            new_row="$new_row$sumval	"
            col=$((col + 1))
        done

        # Trim whitespace from the new row.
        new_row=${new_row%?}
        echo "$new_row" >> "$add_file_path"

    done 3<"$1" 4<"$2"
    cat "$add_file_path"

    return 0
}

# This funciton takes two matrices where the number of columns in the first
# is equal to the number of rows in the second. It multiplies them and sends
# the resulting matrix to stdout.
#
# params:
# $1 - matrix 1
# $2 - matrix 2
multiply() {
    mult_file_path="multfile$$"
    m2_temp_path="m2$$"
    # calculate the transpose of the second matrix to facilitate 
    # multiplication.
    transpose "$2" > "$m2_temp_path"

    # for each row in the first matrix, multiply it elementwise  with each row 
    # in the transpose of the second matrix and sum thse values. Each of these
    cols=$(dims "$1" | cut -d $' ' -f2)
    while read m1row <&3 ; do
        new_row=""
        while read m2row <&4; do
            row_sum=0
            col=1

            while [ "$col" -le "$cols" ]; do
                m1val=$(echo "$m1row" | cut -f "$col" -d $'\t' | tr -d $'\n')
                m2val=$(echo "$m2row" | cut -f "$col" -d $'\t' | tr -d $'\n')
                prod_val=$((m1val * m2val))
                row_sum=$((row_sum + prod_val))
                col=$((col + 1))
            done
            # Add each "product sum" created using a particular row from the
            # first matrix to the same row in the resulting matrix.
            new_row="$new_row$row_sum	"

        done 4<"$m2_temp_path"

        # Add new row to the resulting matrix.
        new_row=${new_row%?}
        echo "$new_row" >> "$mult_file_path"

    done 3<"$1"     
   
    cat "$mult_file_path"

    return 0
}

# Clean up temp files on exit.
trap clean EXIT

# Display matrix dimensions.
if [ "$1" = "dims" ]; then
    inputfilepath="inputfile$$"
    check_num_args "$#" "1" "2"

    # Check that the user has supplied a valid number of arguments. Allow the
    # user to specify the matrix when running the program or by providing 
    # a value via stdin during execution.
    if [ "$?" -ne "0" ]; then
        exit 1
    elif [ "$#" = "1" ]; then
        cat > "$inputfilepath"
    else
        inputfilepath=$2
    fi


    # Check that input file exists.
    if test -r "$inputfilepath" -a -f "$inputfilepath"; then
        dims "$inputfilepath"
    else
        >&2 echo "error: $inputfilepath is not a readable file"
        exit 1
    fi

# Display transpose.
elif [ "$1" = "transpose" ]; then
    inputfilepath="inputfile$$"
    check_num_args "$#" "1" "2"

    # Check that the user has supplied a valid number of arguments. Allow the
    # user to specify the matrix when running the program or by providing 
    # a value via stdin during execution.
    if [ "$?" -ne "0" ]; then
        exit 1
    elif [ "$#" = "1" ]; then
        cat > "$inputfilepath"
    else
        inputfilepath=$2
    fi


    # Check that input file exists.
    if test -r "$inputfilepath" -a -f "$inputfilepath"; then
        transpose "$inputfilepath"
    else
        >&2 echo "error: $inputfilepath is not a readable file"
        exit 1
    fi

# Calculate mean.
elif [ "$1" = "mean" ]; then
    inputfilepath="inputfile$$"
    check_num_args "$#" "1" "2"

    # Check that the user has supplied a valid number of arguments. Allow the
    # user to specify the matrix when running the program or by providing 
    # a value via stdin during execution.
    if [ "$?" -ne "0" ]; then
        exit 1
    elif [ "$#" = "1" ]; then
        cat > "$inputfilepath"
    else
        inputfilepath=$2
    fi

    # Check that input file exists.
    if test -r "$inputfilepath" -a -f "$inputfilepath"; then
        mean "$inputfilepath"
    else
        >&2 echo "error: $inputfilepath is not a readable file"
        exit 1
    fi

# Add matrices.
elif [ "$1" = "add" ]; then
    check_num_args "$#" "3" "3"

    # Check that the user provided a valid number of arguments.
    if [ "$?" -ne "0" ]; then
        exit 1
    fi
    matrixfile1="$2"
    matrixfile2="$3"

    # Check that input file exists.
    if ! test -r "$matrixfile1" -a -f "$matrixfile1" -a -r \
        "$matrixfile2" -a -f "$matrixfile2"; then
        >&2 echo "error: $inputfilepath is not a readable file"
        exit 1
    # Check that the input matrices have compatible dimensions.
    elif [ "$(dims "$matrixfile1")" != "$(dims "$matrixfile2")" ]; then
        >&2 echo "error: matrices have different dimensions"
        exit 1
    else
        add "$matrixfile1" "$matrixfile2"
    fi

# Multiply matrices.
elif [ "$1" = "multiply" ]; then
    check_num_args "$#" "3" "3"

    # Check that the user provided a valid number of arguments.
    if [ "$?" -ne "0" ]; then
        exit 1
    fi
    matrixfile1="$2"
    matrixfile2="$3"

    # Check that the input file exists.
    if ! test -r "$matrixfile1" -a -f "$matrixfile1" -a -r \
        "$matrixfile2" -a -f "$matrixfile2"; then
        >&2 echo "error: $inputfilepath is not a readable file"
        exit 1
    # Check that the matrices have compatible dimensions.
    elif [ "$(dims "$matrixfile1" | cut -d " " -f2 )" != "$(dims "$matrixfile2" | cut -d " " -f1)" ]; then
        >&2 echo "error: matrices have dimensions that prevent multiplication."
        exit 1
    else
        multiply "$matrixfile1" "$matrixfile2"
    fi
# Produce error if the user doesn't provide a valid matrix command.
else
    >&2 echo "error: invalid command"
    exit 1
fi
